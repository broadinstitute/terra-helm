apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.name }}-deployment
  labels:
{{ include "externalcreds.labels" . | indent 4 }}
  {{- if and .Values.proxy.enabled .Values.proxy.reloadOnCertUpdate }}
  annotations:
    reloader.stakater.com/auto: "true"
  {{- end }}
spec:
  revisionHistoryLimit: 0
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 1
  replicas: {{ .Values.replicas }}
  selector:
    matchLabels:
      deployment: {{ .Values.name }}-deployment
  template:
    metadata:
      labels:
        deployment: {{ .Values.name }}-deployment
{{ include "externalcreds.labels" . | indent 8 }}
      annotations:
        {{- /* Automatically restart deployments on config map changes: */}}
        checksum/{{ .Values.name }}-proxy-configmap: {{ include (print $.Template.BasePath "/configmaps/proxy-apache-httpd-configmap.yaml") . | sha256sum }}
        checksum/{{ .Values.name }}-tcell-configmap: {{ include (print $.Template.BasePath "/configmaps/tcell_configmap.yaml") . | sha256sum }}
        {{- if .Values.postgres.enabled }}
        checksum/{{ .Values.name }}-postgres-initdb: {{ include (print $.Template.BasePath "/configmaps/postgres-init-db-configmap.yaml") . | sha256sum }}
        {{- end }}
        {{- if .Values.prometheus.enabled }}
        checksum/{{ .Values.name }}-prometheus-configmap: {{ include (print $.Template.BasePath "/configmaps/prometheus-configmap.yaml") . | sha256sum }}
        {{- end }}
    spec:
      serviceAccountName: {{ .Values.name }}-service-sa
      volumes:
{{ include "externalcreds.app.volumes" . | indent 6 }}
{{ include "externalcreds.sqlproxy.volumes" . | indent 6 }}
      {{- if .Values.proxy.enabled }}
      - name: apache-httpd-proxy-config
        configMap:
          name: {{ .Values.name }}-proxy-configmap
          items:
          - key: apache-httpd-proxy-config
            path: {{ .Values.name }}-proxy.conf
      - name: cert
        secret:
          secretName: {{ .Values.name }}-cert
      {{- if .Values.proxy.tcell.enabled }}
      - name: tcell-config
        configMap:
          name: {{ .Values.name }}-tcell-configmap
          items:
          - key: tcell-config
            path: tcell-config.conf
      {{- end }}
      {{- end }}
      containers:
{{ include "externalcreds.app.container" . | indent 6 }}
{{ include "externalcreds.sqlproxy.container" . | indent 6 }}
      {{- if .Values.proxy.enabled }}
      - name: oidc-proxy
        image: "{{ .Values.proxy.image.repository }}:{{ .Values.proxy.image.version }}"
        env:
        - name: AOU_PREPROD_ALLOWLIST
          valueFrom:
            secretKeyRef:
              name: {{ .Values.name }}-proxy-oauth-allowlist
              key: aou-preprod
        - name: AOU_PERF_ALLOWLIST
          valueFrom:
            secretKeyRef:
              name: {{ .Values.name }}-proxy-oauth-allowlist
              key: aou-perf
        - name: AOU_PROD_ALLOWLIST
          valueFrom:
            secretKeyRef:
              name: {{ .Values.name }}-proxy-oauth-allowlist
              key: aou-prod
        - name: AOU_DEV_ALLOWLIST
          valueFrom:
            secretKeyRef:
              name: {{ .Values.name }}-proxy-oauth-allowlist
              key: aou-dev
        - name: AOU_STABLE_ALLOWLIST
          valueFrom:
            secretKeyRef:
              name: {{ .Values.name }}-proxy-oauth-allowlist
              key: aou-stable
        - name: AOU_STAGING_ALLOWLIST
          valueFrom:
            secretKeyRef:
              name: {{ .Values.name }}-proxy-oauth-allowlist
              key: aou-staging
        - name: TERRA_ID_ALLOWLIST
          valueFrom:
            secretKeyRef:
              name: {{ .Values.name }}-proxy-oauth-allowlist
              key: terra
        - name: REMOTE_USER_CLAIM
          value: sub
        {{- if .Values.proxy.ldap.enabled }}
        - name: LDAP_BASE_DOMAIN
          value: {{ .Values.proxy.ldap.baseDomain }}
        - name: AUTH_LDAP_URL2
          value: 'AuthLDAPURL "ldaps://{{ .Values.proxy.ldap.url }}/ou=people,{{ .Values.proxy.ldap.baseDomain }}?googleSubjectId?sub?(objectClass=*)"'
        - name: AUTH_LDAP_GROUP_ATTR2
          value: 'AuthLDAPGroupAttribute member'
        - name: AUTH_LDAP_BIND_DN2
          value: 'AuthLDAPBindDN "cn=proxy-ro,ou=people,{{ .Values.proxy.ldap.baseDomain }}"'
        - name: AUTH_REQUIRE2
          value: 'Require ldap-group cn=enabled-users,ou=groups,{{ .Values.proxy.ldap.baseDomain }}'
        - name: PROXY_LDAP_BIND_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Values.name }}-proxy-ldap-bind-password
              key: password
        {{- end }}
        {{- if .Values.proxy.tcell.enabled }}
        - name: TCELL_AGENT_APP_ID
          valueFrom:
            secretKeyRef:
              name: {{ .Values.name }}-proxy-tcell-secrets
              key: app-id
        - name: TCELL_AGENT_API_KEY
          valueFrom:
            secretKeyRef:
              name: {{ .Values.name }}-proxy-tcell-secrets
              key: api-key
        - name: ENABLE_TCELL
          value: 'yes'
        {{- end }}
        ports:
        - containerPort: 443
        - containerPort: 80
        volumeMounts:
        - mountPath: /etc/apache2/sites-available/site.conf
          name: apache-httpd-proxy-config
          subPath: {{ .Values.name }}-proxy.conf
        - mountPath: /etc/ssl/certs/server.crt
          subPath: tls.crt
          name: cert
          readOnly: true
        - mountPath: /etc/ssl/private/server.key
          subPath: tls.key
          name: cert
          readOnly: true
        {{- if .Values.ingress.cert.vault.enabled}}
        - mountPath: /etc/ssl/certs/ca-bundle.crt
          subPath: ca-bundle.crt
          name: cert
          readOnly: true
        {{- end }}
        {{- if .Values.proxy.tcell.enabled }}
        - mountPath: /etc/apache2/tcell_agent.config
          name: tcell-config
          subPath: tcell-config.conf
        {{- end }}
      {{- end }}
      {{- if .Values.prometheus.enabled }}
{{ include "externalcreds.init.containers" . | indent 6 }}
---
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: {{ .Values.name }}-cronjob
spec:
  schedule: "*/5 * * * *"
  concurrencyPolicy: Forbid
  jobTemplate:
    metadata:
      labels:
        cron: {{ .Values.name }}-cron
{{ include "externalcreds.labels" . | indent 8 }}
    spec:
      template:
        spec:
          restartPolicy: Never
          serviceAccountName: {{ .Values.name }}-service-sa
          volumes:
{{ include "externalcreds.app.volumes" . | indent 10 }}
{{ include "externalcreds.sqlproxy.volumes" . | indent 10 }}
          containers:
{{ include "externalcreds.app.container" . | indent 10 }}
            command:
              - "java"
              - "-cp"
              - "/app/resources:/app/classes:/app/libs/*"
              - "bio.terra.externalcreds.ExternalCredsCronApplication"
{{ include "externalcreds.sqlproxy.container" . | indent 10 }}
{{ include "externalcreds.init.containers" . | indent 8 }}
---
{{- if .Values.postgres.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.name }}-postgres-deployment
  labels:
{{ include "externalcreds.labels" . | indent 4 }}
{{- include "postgres.deployment.tpl" . }}
{{- end }}
