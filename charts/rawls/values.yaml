global:
  # global.applicationVersion -- What version of the rawls application to deploy
  applicationVersion: latest


# Resource limits for rawls containers
resources:
  requests:
    # resources.requests.cpu -- Number of CPU units to request for the deployment
    cpu: 8
    # resources.requests.memory -- Memory to request for the deployment
    memory: 16Gi
  limits:
    # resources.limits.cpu -- Number of CPU units to limit the deployment to
    cpu: 8
    # resources.limits.memory -- Memory to limit the deployment to
    memory: 16Gi


ingress:
  # ingress.staticIpName -- (string) Required. GCP resource name for ingress static ip
  staticIpName:

  # ingress.serviceName -- (string) Name of the rawls service to associate with GKE ingress.
  serviceName: rawls-frontend

  # ingress.timeoutSec -- Number of seconds to timeout on requests to the ingress
  timeoutSec: 120

  # ingress.sslPolicy -- (string) Name of an existing google ssl policy to associate with an ingress frontend-config
  sslPolicy: tls12-ssl-policy

  # ingress.preSharedCerts -- (string) List of pre existing gcp certs to use on ingress
  preSharedCerts: []

# rawls can be run in multiple deployments. This key contains default
# settings for all deployments configured under the `deployments` key.
deploymentDefaults:
  # deploymentDefaults.enabled -- Whether a declared deployment is enabled. If false, no resources will be created
  enabled: true
  # deploymentDefaults.name -- A name for the deployment that will be substituted into resource definitions.
  # Example: `"rawls1-reader"`
  name: null
  # arbitraty metadata
  # Example: bio.terra.linter/replicas_exception: true
  annotations: {}
  # deploymentDefaults.imageTag -- Image tag to be used when deploying Pods
  # @default global.applicationVersion
  imageTag: null
  # deploymentDefaults.replicas -- Number of replicas for the deployment
  replicas: 0
  # deploymentDefaults.expose -- Whether to create a Service for this deployment
  expose: false
  # deploymentDefaults.serviceName -- What to call the Service
  serviceName: null
  # deploymentDefaults.serviceIP -- Static IP to use for the Service. If set, service will be of type LoadBalancer
  serviceIP: null
  # deploymentDefaults.legacyResourcePrefix -- What prefix to use to refer to secrets rendered from firecloud-develop
  # @default deploymentDefaults.name
  legacyResourcePrefix: null
  probes:
    readiness:
      # deploymentDefaults.probes.readiness.enable -- Whether to configure a readiness probe
      enabled: true
      # deploymentDefaults.probes.readiness.spec -- k8s spec of the readiness probe to deploy, if enabled
      spec:
        httpGet:
          path: /status
          port: 8080
        timeoutSeconds: 5
        initialDelaySeconds: 20
        periodSeconds: 10
        failureThreshold: 6
        successThreshold: 1
    liveness:
      # deploymentDefaults.probes.liveness.enable -- Whether to configure a liveness probe
      enabled: true
      # deploymentDefaults.probes.liveness.spec -- k8s spec of the liveness probe to deploy, if enabled
      spec:
        httpGet:
          path: /status
          port: 8080
        timeoutSeconds: 5
        initialDelaySeconds: 20
        periodSeconds: 10
        failureThreshold: 30 # 5 minutes before restarted
        successThreshold: 1
    startup:
      # probes.startup.enable -- Whether to configure a startup probe
      enabled: true
      spec:
        httpGet:
          path: /status
          port: 8080
        timeoutSeconds: 5
        periodSeconds: 10
        failureThreshold: 1080 # 3 hours before restarted, to prevent liveness probes from interrupting long-running liquibase migrations
        successThreshold: 1

vault:
  # Migration credentials only referenced if migration.enabled == true
  migration:
    # vault.migration.path -- Vault path to secret containing DB credentials
    path: null
    # vault.migration.dbUsernameKey -- Key in Vault secret to DB username
    dbUsernameKey: "slick_db_user"
    # vault.migration.DbPasswordKey -- Key in Vault secret to DB password
    dbPasswordKey: "slick_db_password"

migration:
  # migration.enabled -- Whether to run a Liquibase migration job pre-sync
  enabled: false
  # migration.dryRun -- When true, merely print migration SQL; when false, execute it
  dryRun: true
  # migration.failBasedOnLiquibase -- When true, fail the job (and ArgoCD sync!) if the Liquibase command fails
  failBasedOnLiquibase: true
  # migration.imageTag -- Override the image tag to run the migration on
  # @default global.applicationVersion
  # WARNING: App may behave unexpectedly if its database has been migrated to a different version than the app
  imageTag: null
  # migration.secretPrefix -- Prefix for ctmpl and env secrets
  # NOTE: Generally equals some deploymentDefaults.name, as secrets are per-deployment but migrations are per-namespace
  secretPrefix: "rawls-backend"
  # migration.serviceAccount -- Name of the k8s SA to use for the job
  serviceAccount: "rawls-sa"
  # migration.syncWave -- Wave to run migration as a sync hook (presumably after SA's RBAC wave)
  # NOTE: Sync hook, not PreSync, so that SA/RBAC can be made normally via an earlier wave
  syncWave: "-1"
