global:
  # global.applicationVersion -- What version of the rawls application to deploy
  applicationVersion: latest
  # global.trustedAddresses -- A map of addresses that will be merged with serviceAllowedAddresses.
  # Example: `{ "nickname": ["x.x.x.x/y", "x.x.x.x/y"] }`
  trustedAddresses: {}


# Resource limits for rawls containers
resources:
  requests:
    # resources.requests.cpu -- Number of CPU units to request for the deployment
    cpu: 8
    # resources.requests.memory -- Memory to request for the deployment
    memory: 16Gi
  limits:
    # resources.limits.cpu -- Number of CPU units to limit the deployment to
    cpu: 8
    # resources.limits.memory -- Memory to limit the deployment to
    memory: 16Gi

# rawls can be run in multiple deployments. This key contains default
# settings for all deployments configured under the `deployments` key.
deploymentDefaults:
  # deploymentDefaults.enabled -- Whether a declared deployment is enabled. If false, no resources will be created
  enabled: true
  # deploymentDefaults.name -- A name for the deployment that will be substituted into resuorce definitions.
  # Example: `"rawls1-reader"`
  name: null
  # deploymentDefaults.imageTag -- Image tag to be used when deploying Pods
  # @defautl global.applicationVersion
  imageTag: null
  # deploymentDefaults.replicas -- Number of replicas for the deployment
  replicas: 0
  # deploymentDefaults.expose -- Whether to create a Service for this deployment
  expose: false
  # deploymentDefaults.serviceName -- What to call the Service
  serviceName: null
  # deploymentDefaults.serviceIP -- Static IP to use for the Service. If set, service will be of type LoadBalancer
  serviceIP: null
  # deploymentDefaults.serviceAllowedAddresses -- What source IPs to whitelist for access to the service
  serviceAllowedAddresses: {}
  # deploymentDefaults.legacyResourcePrefix -- What prefix to use to refer to secrets rendered from firecloud-develop
  # @default deploymentDefaults.name
  legacyResourcePrefix: null

# A map of rawls deployments. In Terra's production environment,
# rawls is deployed as 2 separate services (frontend and backend) with different configurations.

