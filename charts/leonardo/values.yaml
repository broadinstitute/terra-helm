global:
  # global.applicationVersion -- What version of the Leonardo application to deploy
  applicationVersion: latest
# Leonardo can be run in multiple deployments. This key contains default
# settings for all deployments configured under the `deployments` key.
deploymentDefaults:
  # deploymentDefaults.enabled -- Whether a declared deployment is enabled. If false, no resources will be created
  enabled: true
  # deploymentDefaults.name -- (Required) A name for the deployment that will be substituted into resource definitions.
  # Example: `"leonardo-backend"`.
  # The deployment name will be substituted into Deployment and ConfigMap names.
  #   Eg. "leonardo-frontend" -> "leonardo-frontend-deployment", "leonardo-frontend-cm"
  name: null
  annotations: {}
  # deploymentDefaults.imageRepository -- Image repo to pull Leonardo images from
  imageRepository: gcr.io/broad-dsp-gcr-public/leonardo
  # deploymentDefaults.imageTag -- Image tag to be used when deploying Pods
  # @default global.applicationVersion
  imageTag: null
  # Allows CloudSQL proxy time to start up. See DDO-1352
  startupSleep: 30
  # deploymentDefaults.replicas -- Number of replicas for the deployment
  replicas: 0
  probes:
    readiness:
      # deploymentDefaults.probes.readiness.enable -- Whether to configure a readiness probe
      enabled: true
      # deploymentDefaults.probes.readiness.spec -- k8s spec of the readiness probe to deploy, if enabled
      spec:
        httpGet:
          path: /status
          port: 8080
        timeoutSeconds: 5
        initialDelaySeconds: 15
        periodSeconds: 10
        failureThreshold: 6
        successThreshold: 1
    liveness:
      # deploymentDefaults.probes.liveness.enable -- Whether to configure a liveness probe
      enabled: true
      # deploymentDefaults.probes.liveness.spec -- k8s spec of the liveness probe to deploy, if enabled
      spec:
        httpGet:
          path: /version
          port: 8080
        timeoutSeconds: 5
        initialDelaySeconds: 15
        periodSeconds: 10
        failureThreshold: 30 # 5 minutes before restarted
        successThreshold: 1
    startup:
      # deploymentDefaults.probes.startup.enable -- Whether to configure a startup probe
      enabled: true
      # deploymentDefaults.probes.startup.spec -- k8s spec of the startup probe to deploy, if enabled
      spec:
        httpGet:
          path: /version
          port: 8080
        timeoutSeconds: 5
        periodSeconds: 10
        failureThreshold: 1080 # 3 hours before restarted, to prevent liveness probes from interrupting long-running liquibase migrations
        successThreshold: 1
  # deploymentDefaults.proxyImage -- Image that the OIDC proxy uses
  proxyImage: broadinstitute/openidc-proxy:tcell_3_1_0
# A map of Leonardo deployments. In Terra's production environment,
# Leonardo is deployed as two services (backend and frontend)
# with different configurations.
#
# Here, we configure it as a single standalone deployment, similar to how a
# developer might run Leonardo.
deployments:
  standalone:
    # deployments.standalone.name -- Name to use for the default standalone Leonardo deployment.
    name: leonardo
    # deployments.standalone.replicas -- Number of replicas in the default standalone Leonardo deployment
    replicas: 1
# Settings for Leonardo's Ingress & Service
ingress:
  # ingress.enabled -- Whether to create Ingress, Service and associated config resources
  enabled: true
  # ingress.deployment -- Name of the deployment to associate with the Ingress
  # (should correspond to the "name" field of a deployment, under the deployments key, above)
  deployment: leonardo
  # ingress.staticIpName -- (string) Required. Name of the static IP, allocated in GCP, to associate with the Ingress
  staticIpName: null
  # ingress.preSharedCerts -- Array of pre-shared GCP SSL certificate names to associate with the Ingress
  preSharedCerts: []
  # ingress.sslPolicy -- (string) Name of a GCP SSL policy to associate with the Ingress
  sslPolicy: null
  # ingress.timeoutSec -- Load balancer backend timeout
  # (Leonardo has a large backend timeout to support long-lived websockets -- see DDO-132 / IA-1665)
  timeoutSec: 28800
# Settings for Prometheus monitoring
monitoring:
  # monitoring.enabled -- Whether to enable Prometheus monitoring for Leonardo pods
  enabled: true
commonCronjob:
  # this is defined in terra-helm repo
  reportDestinationBucket:
cronjob:
  # deployments.standalone.name -- Name to use for the default standalone Leonardo deployment
  name: leonardo-resource-validator-cronjob
  imageRepository: us.gcr.io/broad-dsp-gcr-public/resource-validator
  imageTag: 79854b1
  googleProject:
  enabled: false
janitorCron:
  # deployments.standalone.name -- Name to use for the default standalone Leonardo deployment
  name: leonardo-janitor-cronjob
  imageRepository: us.gcr.io/broad-dsp-gcr-public/janitor
  imageTag: 79854b1
  enabled: false
zombieMonitorCron:
  # deployments.standalone.name -- Name to use for the default standalone Leonardo deployment
  name: leonardo-zombie-monitor-cronjob
  imageRepository: us.gcr.io/broad-dsp-gcr-public/zombie-monitor
  imageTag: 79854b1
  enabled: false
vault:
  # vault.pathPrefix -- (string) Vault path prefix for secrets. Required if vault.enabled.
  pathPrefix:

liquibase-migration:
  # In an env-specific file use something like the following to fully enable:
  # ```
  # liquibase-migration:
  #   migrationJobs:
  #     - name: "leonardo"
  #       enabled: true
  #       migrationDatabaseCredentials:
  #         fromVaultSecret:
  #           path: "secret/path/in/vault"
  # ```
  # See https://github.com/broadinstitute/terra-helm/blob/master/charts/liquibase-migration for more information

  defaults:
    enabled: false
    sqlproxyCredentialFileMount:
      secretName: "leonardo-backend-sqlproxy-ctmpls"
    sqlproxyContainerConfig:
      envFrom:
        - secretRef:
            name: "leonardo-backend-sqlproxy-env"
    migrationImage: "gcr.io/broad-dsp-gcr-public/leonardo"
    migrationArgsClasspath:
      - "$(find /leonardo -name 'leonardo*.jar')"
    migrationConfigFileMount:
      secretName: "leonardo-backend-app-ctmpls"
    migrationDatabaseCredentials:
      fromVaultSecret:
        path: null
        usernameKey: "db_user"
        passwordKey: "db_password"
