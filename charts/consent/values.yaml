global:
  # global.applicationVersion -- What version of the Ontology application to deploy
  applicationVersion: latest

# Values from consent config
confFilePath:
basicAuthUserKey:
basicAuthPasswordKey:
sendgridApiKeyKey:

# Values from postgres user info
databaseUserPath:
databaseUserKey:
databasePasswordKey:

databaseUrl:
# Should be set to true when deploying locally with Skaffold
devDeploy: false

elasticSearchServer1:
elasticSearchServer2:
elasticSearchServer3:

environment:

emailNotificationsEnabled:

gcsAccountPath:
gcsAccountKey:

googleClientId:
googleBucket:
googleBucketSubdirectory:
googleProject:
googleProjectZone:
cloudSqlInstance:

image:
imageRepository:
imageTag:

# Allows CloudSQL proxy time to start up. See DDO-1352
startupSleep: 30

probes:
  readiness:
    # probes.readiness.enable -- Whether to configure a readiness probe
    enabled: true
    spec:
      httpGet:
        path: /status
        port: 8080
      timeoutSeconds: 1
      initialDelaySeconds: 60
      periodSeconds: 10
      failureThreshold: 10
      successThreshold: 1
  liveness:
    # probes.liveness.enable -- Whether to configure a liveness probe
    enabled: true
    spec:
      httpGet:
        path: /status
        port: 8080
      timeoutSeconds: 5
      initialDelaySeconds: 60
      periodSeconds: 10
      failureThreshold: 30
  startup:
    # probes.startup.enable -- Whether to configure a startup probe
    enabled: true
    spec:
      httpGet:
        path: /status
        port: 8080
      timeoutSeconds: 5
      periodSeconds: 10
      failureThreshold: 1080 # 3 hours before restarted, to prevent liveness probes from interrupting long-running liquibase migrations
      successThreshold: 1

ingress:
  # ingress.enabled -- Whether to create Ingress and associated Service, FrontendConfig and BackendConfig
  enabled: true
  # ingress.staticIpName -- (string) Required. Name of the static IP, allocated in GCP, to associate with the Ingress
  staticIpName: null
  cert:
    # A TLS certificate is used for the GKE ingress and the OIDC proxy sidecar.
    # If preSharedCerts is not empty, its contents are used for the GKE ingress. Otherwise a secret with the cert is expected.
    # The cert secret is required if the OIDC proxy is enabled.
    # This secret can be
    #   - synced from Vault
    #   - created/managed with cert-manager
    #   - created manually before the chart is applied

    # ingress.cert.preSharedCerts -- Array of pre-shared GCP SSL certificate names to associate with the Ingress
    preSharedCerts: []
  # ingress.sslPolicy -- (string) Name of a GCP SSL policy to associate with the Ingress
  sslPolicy: null
  # ingress.timeoutSec -- Load balancer backend timeout
  timeoutSec: 120
  requestPath: /status
# GKE ingress requires certificate in a slightly different format from the apache proxy
# This is used to set tls for the GKE ingress
ingressCert:
  cert:
    # ingressCert.cert.path -- (string) Path to secret containing .crt
    path:
    # ingressCert.cert.secretKey -- (string) Key in secret containing .crt
    secretKey:
  key:
    # ingressCert.key.path -- (string) Path to secret containing .key
    path:
    # ingressCert.key.secretKey -- (string) Key in secret containing .key
    secretKey:

# Resource name for the global static ip in google to be used for the ingress
ingressIpName:
# ingressTimeout -- (number) number of seconds requests on the https loadbalancer will time out after
ingressTimeout: 120

proxyLogLevel:
proxyImageRepository:
proxyImageVersion:

replicas: 3

sendgridApiKey:

sentryDsnPath:
sentryDsnKey:

servicesLocalUrl:
servicesOntologyUrl:
servicesSamUrl:

sslPolicy:  tls12-ssl-policy

vaultEnabled: true

vaultCertPath:
vaultCertSecretKey:
vaultKeyPath:
vaultKeySecretKey:
vaultChain:
vaultChainPath:
vaultChainSecretKey:

sherlock:
  enabled: true
  appImageName: gcr.io/broad-dsp-gcr-public/consent
  appName: consent
  sherlockImageTag: v0.0.15

  vault:
    pathPrefix: secret/suitable/sherlock/prod
