# -- Specific migrations to run; each config merged over the defaults to form the full configuration
# @default -- None by default, one entry here required per migration
migrationJobs:
  - # -- (string) Required name of this specific migration
    name:
    # Keys from the defaults may be given here to override them for this specific migration

# -- Baseline config merged under each migrationJobs one to form the full configuration for that particular migration
# @default -- See sub-keys
defaults:

  # -- Whether to enable migrations by default
  enabled: false
  
  # -- (string) Name of the application being deployed
  # @default -- Set to .Release.Name
  k8sAppName: null
  # -- (string) Template reference to use to obtain resource labels, set to empty to disable
  # @default -- Set to `${k8sAppName}.labels`
  k8sLabelRef: null
  # -- (string) App's Kubernetes service account (selective sync may be necessary if the KSA isn't applied before k8sSyncWave)
  # @default -- Set to `${k8sAppName}-sa`
  k8sServiceAccount: null
  # -- (string) Argo CD wave to apply resources in
  k8sSyncWave: "-1"

  # -- Image to use for the Cloud SQL Proxy
  sqlproxyImage: "gcr.io/cloudsql-docker/gce-proxy"
  # -- Image tag to use for the Cloud SQL Proxy
  sqlproxyImageTag: "1.25.0-alpine"
  # -- Docker command directive to invoke a shell in the container, to expand proxyArgs* values
  sqlproxyShell: ["sh", "-c"]
  # -- Max connections argument passed to the proxy executable, expanded by proxyShell
  # @default -- Mimics behavior of legacy broadinstitute/cloudsqlproxy image
  sqlproxyArgsMaxConnections: "${CLOUDSQL_MAXCONNS:-0}"
  # -- Instances argument passed to the proxy executable, expanded by proxyShell
  # @default -- Mimics behavior of legacy broadinstitute/cloudsqlproxy image
  sqlproxyArgsInstances: "${CLOUDSQL_CONNECTION_LIST:-${GOOGLE_PROJECT}:${CLOUDSQL_ZONE}:${CLOUDSQL_INSTANCE}=tcp:0.0.0.0:${PORT:-3306}}"
  # -- Controls for mounting and passing a credentials file (necessary unless Workload Identity or another mechanism configured)
  # @default -- With the secret name omitted, no credentials file will be mounted or passed
  sqlproxyCredentialFileMount:
    # -- (string) The exact name of a Kubernetes secret containing the desired file under a file-named key
    secretName: null
    # -- The full mount path of the file, ending with the file itself
    mountFilePath: "/etc/sqlproxy-service-account.json"
  # -- (object) Extra configuration applied directly to the proxy container (useful for env or envFrom directives)
  sqlproxyContainerConfig: null

  # -- (string) Image to use for the migration, usually the application image with bundled Liquibase
  migrationImage:
  # -- (string) Image tag to use for the migration image; **warning** that setting this can cause inconsistent migrations (default recommended)
  # @default -- Set to global.applicationVersion
  migrationImageTag:
  # -- Docker command directive to invoke a shell in the container, to expand migrationArgs* values
  migrationShell: ["bash", "-c"]
  # -- (string) Arbitrary shell code to run before the migration (does not need trailing `&& \`)
  migrationPreflightShellCode: null
  # -- Time to wait before attempting to start Liquibase, to allow proxy to boot
  migrationDelay: "15s"
  # -- (list) Java classpath location(s) containing Liquibase, JDBC driver, any packaged changelogs, and all dependencies;
  # if the app is packaged then its `.jar` is sufficient (CLI argument wrapped in double quotes, bash expansion allowed)
  migrationArgsClasspath:
  # -- If the Kubernetes job should always succeed regardless of the Liquibase command's exit status
  migrationArgsLiquibaseCommand: "update"
  # -- (string) Java classpath location of the Liquibase changelog file, expanded by migrationShell
  migrationArgsConfigChangelog: null
  # -- (string) Java class name of the JDBC driver to use, expanded by migrationShell
  migrationArgsConfigDriver: null
  # -- (string) JDBC URL of the database, expanded by migrationShell
  migrationArgsConfigUrl: null
  # -- (string) Optional arbitrary additional arguments to be passed, from https://docs.liquibase.com/commands/home.html
  migrationArgsAdditional: null
  # -- Controls for mounting and passing a Liquibase.properties file (necessary unless all other migrationConfigArgs* values passed)
  # @default -- With the secret name omitted, no configuration file will be mounted or passed
  migrationConfigFileMount:
    # -- (string) The exact name of a Kubernetes secret containing the desired file under a file-named key
    secretName: null
    # -- The full mount path of the file, ending with the file itself
    mountFilePath: "/etc/liquibase.properties"
  # -- Controls for setting up database authentication, one sub-object must be provided;
  # fromKubernetesSecret takes precedence if provided
  # @default -- None
  migrationDatabaseCredentials:
    # -- Use an existing Kubernetes secret for credentials directly
    # @default -- With the secret name omitted, no existing Kubernetes secret will be accessed
    fromKubernetesSecret:
      # -- (string) Name of the existing Kubernetes secret to use
      name: null
      # -- (string) Key of the username within the Kubernetes secret
      usernameKey: null
      # -- (string) Key of the password within the Kubernetes secret
      passwordKey: null
      # -- (string) Optional key of a database name in the Kubernetes secret, available as $DB_NAME in the migration container
      # @default -- If null, $DB_NAME remains unset
      databaseNameKey: null
    # -- Create a Kubernetes secret via secrets-manager from a Vault secret
    # @default -- With the Vault secret path omitted, no Vault secret will be accessed
    fromVaultSecret:
      # -- (string) Path of the existing Vault secret to use
      path: null
      # -- (string) Key of the username within the Vault secret
      usernameKey: null
      # -- (string) Key of the password within the Vault secret
      passwordKey: null
      # -- (string) Optional key of a database name in the Vault secret, available as $DB_NAME in the migration container
      # @default -- If null, $DB_NAME remains unset
      databaseNameKey: null

