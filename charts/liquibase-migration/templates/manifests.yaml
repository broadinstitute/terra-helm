{{- range .Values.enumerated }}

{{- /*
Assemble the config for this migration: we can't use merge because that's deep,
and we want to completely overwrite default keys if present in the emurated config
*/}}
{{- $config := $.Values.defaults | deepCopy }}
{{- range $key, $val := . }}
  {{- $_ := set $config $key $val }}
{{- end }}

{{- if $config.enabled }}

{{- /*
Imperative defaults that can't exist in the Values file
*/}}
{{- if not (hasKey $config "migrationImageTag") }}
  {{- if not ($.Values.global | default dict | dig "applicationVersion" "") }}
    {{- fail ".Values.global.applicationVersion not set, so migrationImageTag must be passed"}}
  {{- end }}
  {{- $_ := set $config "migrationImageTag" $.Values.global.applicationVersion }}
{{- end }}
{{- if not (hasKey $config "k8sAppName") }}
  {{- $_ := set $config "k8sAppName" $.Release.Name }}
{{- end }}
{{- if not (hasKey $config "k8sLabelRef") }}
  {{- $_ := set $config "k8sLabelRef" (printf "%s.labels" $config.k8sAppName) }}
{{- end }}
{{- if not (hasKey $config "k8sServiceAccount") }}
  {{- $_ := set $config "k8sServiceAccount" (printf "%s-sa" $config.k8sAppName) }}
{{- end }}

{{- /*
Imperative validation for gotchas
*/}}
{{- if and (dig "migrationDatabaseCredentials" "fromVaultSecret" "path" "" $config | not) (dig "migrationDatabaseCredentials" "existingKubernetesSecret" "name" "" $config | not) }}
  {{- fail "Either migrationDatabaseCredentials.fromVaultSecret or migrationDatabaseCredentials.existingKubernetesSecret must be provided" }}
{{- end }}

{{- /*
Create secret for database credentials if required
*/}}
{{- if (dig "migrationDatabaseCredentials" "fromVaultSecret" "path" "" $config) }}
apiVersion: secrets-manager.tuenti.io/v1alpha1
kind: SecretDefinition
metadata:
  name: {{ $config.name | required "Name is required" }}-migration-secretdef
  {{- if $config.k8sLabelRef }}
  labels: {{- include $config.k8sLabelRef . | nindent 4 }}
  {{- end }}
  annotations:
    argocd.argoproj.io/sync-wave: {{ $config.k8sSyncWave | quote }}
spec:
  name: {{ $config.name }}-migration-sql-secrets
  keysMap:
    db-username:
      key: {{ $config.migrationDatabaseCredentials.fromVaultSecret.usernameKey | required "fromVaultSecret.usernameKey required if using Vault" }}
      path: {{ $config.migrationDatabaseCredentials.fromVaultSecret.path }}
      encoding: text
    db-password:
      key: {{ $config.migrationDatabaseCredentials.fromVaultSecret.passwordKey | required "fromVaultSecret.passwordKey required if using Vault" }}
      path: {{ $config.migrationDatabaseCredentials.fromVaultSecret.path }}
      encoding: text
---
{{- end }}

{{- /*
Create migration job
*/}}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ $config.name }}-liquibase-migration
  {{- if $config.k8sLabelRef }}
  labels: {{- include $config.k8sLabelRef . | nindent 4 }}
  {{- end }}
  annotations:
    argocd.argoproj.io/hook: Sync
    argocd.argoproj.io/hook-delete-policy: BeforeHookCreation
    argocd.argoproj.io/sync-wave: {{ $config.k8sSyncWave | quote }}
spec:
  backoffLimit: 2
  template:
    metadata:
      name: {{ $config.name }}-liquibase-migration
      {{- if $config.k8sLabelRef }}
      labels: {{- include $config.k8sLabelRef . | nindent 8 }}
      {{- end }}
    spec:
      # Allow migration-liquibase to kill migration-sqlproxy's process
      shareProcessNamespace: true
      restartPolicy: Never
      serviceAccountName: {{ $config.k8sServiceAccount }}
      # Most apps reference "127.0.0.1" in DB URL but some expect "sqlproxy"
      hostAliases:
      - ip: 127.0.0.1
        hostnames:
        - sqlproxy
      {{- if or (dig "proxyCredentialFileMount" "secretName" "" $config) (dig "migrationConfigFileMount" "secretName" "" $config) }}
      volumes:
      {{- if (dig "proxyCredentialFileMount" "secretName" "" $config) }}
      - name: proxyCredentials
        secret:
          secretName: {{ $config.proxyCredentialFileMount.secretName }}
      {{- end }}
      {{- if (dig "migrationConfigFileMount" "secretName" "" $config) }}
      - name: migrationConfigs
        secret:
          secretName: {{ $config.migrationConfigFileMount.secretName }}
      {{- end }}
      {{- end }}
      containers:
      - name: {{ $config.name }}-migration-sqlproxy
        image: {{ $config.proxyImage }}:{{ $config.proxyImageTag }}
        {{- if (dig "proxyCredentialFileMount" "secretName" "" $config) }}
        volumeMounts:
        - mountPath: {{ $config.proxyCredentialFileMount.mountFilePath | required "proxyCredentialFileMount.mountFilePath required if proxyCredentialFileMount.secretName provided"}}
          subPath: {{ $config.proxyCredentialFileMount.mountFilePath | splitList "/" | last }}
          name: proxyCredentials
          readOnly: true
        {{- end }}
        {{- if $config.proxyContainterConfig }}
        {{ $config.proxyContainterConfig | indent 8 }}
        {{- end }}
        command: {{ $config.proxyShell }}
        args:
        - >-
          /cloud_sql_proxy 
            -verbose
            -max_connections={{ $config.proxyArgsMaxConnections }}
            -instances={{ $config.proxyArgsInstances }}
            {{- if (dig "proxyCredentialFileMount" "secretName" "" $config) }}
            -credential_file={{ $config.proxyCredentialFileMount.mountFilePath }}
            {{- end }}
      - name: {{ $config.name }}-migration-liquibase
        image: {{ $config.migrationImage | required "migrationImage required" }}:{{ $config.migrationImageTag }}
        {{- if (dig "migrationConfigFileMount" "secretName" "" $config) }}
        volumeMounts:
        - mountPath: {{ $config.migrationConfigFileMount.mountFilePath | required "migrationConfigFileMount.mountFilePath required if migrationConfigFileMount.secretName provided"}}
          subPath: {{ $config.migrationConfigFileMount.mountFilePath | splitList "/" | last }}
          name: migrationConfigs
          readOnly: true
        {{- end }}
        env:
        - name: DB_USERNAME
          valueFrom:
            secretKeyRef:
              {{- if (dig "migrationDatabaseCredentials" "fromVaultSecret" "path" "" $config) }}
              name: {{ $config.name }}-migration-sql-secrets
              key: db-username
              {{- end }}
              {{- if (dig "migrationDatabaseCredentials" "existingKubernetesSecret" "name" "" $config) }}
              name: {{ $config.migrationDatabaseCredentials.existingKubernetesSecret.name }}
              key: {{ $config.migrationDatabaseCredentials.existingKubernetesSecret.usernameKey | required "existingKubernetesSecret.usernameKey required if existingKubernetesSecret.name passed"}}
              {{- end }}
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              {{- if (dig "migrationDatabaseCredentials" "fromVaultSecret" "path" "" $config) }}
              name: {{ $config.name }}-migration-sql-secrets
              key: db-password
              {{- end }}
              {{- if (dig "migrationDatabaseCredentials" "existingKubernetesSecret" "name" "" $config) }}
              name: {{ $config.migrationDatabaseCredentials.existingKubernetesSecret.name }}
              key: {{ $config.migrationDatabaseCredentials.existingKubernetesSecret.passwordKey | required "existingKubernetesSecret.passwordKey required if existingKubernetesSecret.name passed"}}
              {{- end }}
        command: {{ $config.migrationShell }}
        args:
        - >-
          {{- if $config.migrationDelay }}
          sleep {{ $config.migrationDelay }} &&
          {{- end }}
          java -cp {{ $config.migrationArgsJarLocation | required "Jar location required" }} liquibase.integration.commandline.Main
            --classpath={{ $config.migrationArgsJarLocation }}
            --username="$DB_USERNAME"
            --password="$DB_PASSWORD"
            {{- if (dig "migrationConfigFileMount" "secretName" "" $config) }}
            --defaultsFile={{ $config.migrationConfigFileMount.mountFilePath }}
            {{- end }}
            {{- if $config.migrationArgsConfigChangelog }}
            --changelog={{ $config.migrationArgsConfigChangelog }}
            {{- end }}
            {{- if $config.migrationArgsConfigDriver }}
            --driver={{ $config.migrationArgsConfigDriver }}
            {{- end }}
            {{- if $config.migrationArgsConfigUrl }}
            --url={{ $config.migrationArgsConfigUrl }}
            {{- end }}
            {{- if $config.migrationsArgsAdditional }}
            {{ $config.migrationsArgsAdditional }}
            {{- end }}
            {{ $config.migrationArgsLiquibaseCommand }};
          EXIT=$?;
          pkill -SIGTERM cloud_sql_proxy;
          exit $EXIT
---
{{- end }}

{{- end }}
