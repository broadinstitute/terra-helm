apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Chart.Name }}-deployment
  labels:
    {{ template "workspacemanager.labels" . }}
  {{- if and .Values.proxy.enabled .Values.proxy.reloadOnCertUpdate }}
  annotations:
    reloader.stakater.com/auto: "true"
  {{- end }}
spec:
  replicas: {{ .Values.replicas }}
  selector:
    matchLabels:
      app: {{ .Chart.Name }}
  template:
    metadata:
      name: {{ .Chart.Name }}-service
      labels:
        app: {{ .Chart.Name }}
    spec:
      serviceAccountName: {{ .Chart.Name }}-service-sa
      containers:
      - name: {{ .Chart.Name }}
        image: "{{- if .Values.image -}}
            {{ .Values.image }}
          {{- else -}}
            {{ .Values.imageConfig.repository }}:{{ default .Values.appVersion .Values.imageConfig.tag }}
          {{- end }}"
        imagePullPolicy: {{ .Values.imageConfig.imagePullPolicy }}
        {{- if not .Values.proxy.enabled }}
        ports:
        - containerPort: 8080
        {{- end }}
        env:
        {{- if not .Values.postgres.enabled }}
        - name: DATABASE_USER
          valueFrom:
            secretKeyRef:
              name: workspace-postgres-db-creds
              key: username
        - name: DATABASE_USER_PASSWORD
          valueFrom:
            secretKeyRef:
              name: workspace-postgres-db-creds
              key: password
        - name: DATABASE_NAME
          valueFrom:
            secretKeyRef:
              name: workspace-postgres-db-creds
              key: db
        - name: STAIRWAY_DATABASE_USER
          valueFrom:
            secretKeyRef:
              name: workspace-stairway-db-creds
              key: username
        - name: STAIRWAY_DATABASE_USER_PASSWORD
          valueFrom:
            secretKeyRef:
              name: workspace-stairway-db-creds
              key: password
        - name: STAIRWAY_DATABASE_NAME
          valueFrom:
            secretKeyRef:
              name: workspace-stairway-db-creds
              key: db
        {{- else }}
        - name: DATABASE_HOSTNAME
          value: {{ .Chart.Name }}-postgres-service.{{ .Release.Namespace }}.svc.cluster.local
        - name: DATABASE_USER
          value: postgres
        - name: DATABASE_USER_PASSWORD
          value: {{ .Values.postgres.password }}
        - name: DATABASE_NAME
          value: {{ index .Values.postgres.dbs 0 }}
        - name: STAIRWAY_DATABASE_USER
          value: postgres
        - name: STAIRWAY_DATABASE_USER_PASSWORD
          value: {{ .Values.postgres.password }}
        - name: STAIRWAY_DATABASE_NAME
          value: {{ index .Values.postgres.dbs 1 }}
        {{- end }}
        {{- if .Values.initDB }}
        - name: INIT_DB
          value: 'true'
        {{- end }}
        - name: SAM_ADDRESS
          value: {{ .Values.samAddress }}
        - name: SERVICE_GOOGLE_PROJECT
          value: {{ .Values.serviceGoogleProject }}
        - name: SAMPLING_PROBABILITY
          value: "{{ .Values.samplingProbability }}"
        - name: CLOUD_TRACE_SA_PATH
          value: /secrets/cloudtrace/service-account.json
        volumeMounts:
          - name: cloud-trace-sa-creds
            mountPath: /secrets/cloudtrace
            readOnly: true
      {{- if not .Values.postgres.enabled }}
      - name: cloudsql-proxy
        image: gcr.io/cloudsql-docker/gce-proxy:1.16
        env:
        - name: SQL_INSTANCE_PROJECT
          valueFrom:
            secretKeyRef:
              name: workspace-cloudsql-postgres-instance
              key: project
        - name: SQL_INSTANCE_REGION
          valueFrom:
            secretKeyRef:
              name: workspace-cloudsql-postgres-instance
              key: region
        - name: SQL_INSTANCE_NAME
          valueFrom:
            secretKeyRef:
              name: workspace-cloudsql-postgres-instance
              key: name
        command: ["/cloud_sql_proxy",
                  "-instances=$(SQL_INSTANCE_PROJECT):$(SQL_INSTANCE_REGION):$(SQL_INSTANCE_NAME)=tcp:5432",
                  "-credential_file=/secrets/cloudsql/service-account.json"]
        securityContext:
          runAsUser: 2  # non-root user
          allowPrivilegeEscalation: false
        volumeMounts:
        - name: cloudsql-sa-creds
          mountPath: /secrets/cloudsql
          readOnly: true
      {{- end }}
      {{- if .Values.proxy.enabled }}
      - name: oidc-proxy
        image: "{{ .Values.proxy.image.repository }}:{{ .Values.proxy.image.version }}"
        env:
        - name: AOU_PREPROD_WHITELIST
          valueFrom:
            secretKeyRef:
              name: proxy-oauth-whitelist
              key: aou-preprod
        - name: AOU_PERF_WHITELIST
          valueFrom:
            secretKeyRef:
              name: proxy-oauth-whitelist
              key: aou-perf
        - name: AOU_PROD_WHITELIST
          valueFrom:
            secretKeyRef:
              name: proxy-oauth-whitelist
              key: aou-prod
        - name: AOU_DEV_WHITELIST
          valueFrom:
            secretKeyRef:
              name: proxy-oauth-whitelist
              key: aou-dev
        - name: AOU_STABLE_WHITELIST
          valueFrom:
            secretKeyRef:
              name: proxy-oauth-whitelist
              key: aou-stable
        - name: AOU_STAGING_WHITELIST
          valueFrom:
            secretKeyRef:
              name: proxy-oauth-whitelist
              key: aou-staging
        - name: TERRA_ID_WHITELIST
          valueFrom:
            secretKeyRef:
              name: proxy-oauth-whitelist
              key: terra
        - name: REMOTE_USER_CLAIM
          value: sub
        {{- if .Values.proxy.ldap.enabled }}
        - name: LDAP_BASE_DOMAIN
          value: {{ .Values.proxy.ldap.baseDomain }}
        - name: AUTH_LDAP_URL2
          value: 'AuthLDAPURL "ldaps://{{ .Values.proxy.ldap.url }}/ou=people,{{ .Values.proxy.ldap.baseDomain }}?googleSubjectId?sub?(objectClass=*)"'
        - name: AUTH_LDAP_GROUP_ATTR2
          value: 'AuthLDAPGroupAttribute member'
        - name: AUTH_LDAP_BIND_DN2
          value: 'AuthLDAPBindDN "cn=proxy-ro,ou=people,{{ .Values.proxy.ldap.baseDomain }}"'
        - name: AUTH_REQUIRE2
          value: 'Require ldap-group cn=enabled-users,ou=groups,{{ .Values.proxy.ldap.baseDomain }}'
        - name: PROXY_LDAP_BIND_PASSWORD
          valueFrom:
            secretKeyRef:
              name: proxy-ldap-bind-password
              key: password
        {{- end }}
        {{- if .Values.proxy.tcell.enabled }}
        - name: TCELL_APP_ID
          valueFrom:
            secretKeyRef:
              name: proxy-tcell-secrets
              key: app-id
        - name: TCELL_API_KEY
          valueFrom:
            secretKeyRef:
              name: proxy-tcell-secrets
              key: api-key
        - name: ENABLE_TCELL
          value: 'yes'
        {{- end }}
        ports:
        - containerPort: 443
        - containerPort: 80
        volumeMounts:
        - mountPath: /etc/apache2/sites-available/site.conf
          name: apache-httpd-proxy-config
          subPath: workspace-manager-proxy.conf
        - mountPath: /etc/ssl/certs/server.crt
          subPath: tls.crt
          name: cert
          readOnly: true
        - mountPath: /etc/ssl/private/server.key
          subPath: tls.key
          name: cert
          readOnly: true
        {{- if .Values.vaultCert.enabled}}
        - mountPath: /etc/ssl/certs/ca-bundle.crt
          subPath: ca-bundle.crt
          name: cert
          readOnly: true
        {{- end }}
        {{- if .Values.proxy.tcell.enabled }}
        - mountPath: /etc/apache2/tcell_agent.config
          name: tcell-config
          subPath: tcell-config.conf
        {{- end }}
      {{- end }}
      volumes:
        {{- if not .Values.postgres.enabled }}
        - name: cloudsql-sa-creds
          secret:
            secretName: workspace-sqlproxy-sa
        {{- end }}
        - name: cloud-trace-sa-creds
          secret:
            secretName: workspace-cloud-trace-sa
        {{- if .Values.proxy.enabled }}
        - name: apache-httpd-proxy-config
          configMap:
            name: {{ .Chart.Name }}-proxy-configmap
            items:
            - key: apache-httpd-proxy-config
              path: workspace-manager-proxy.conf
        - name: cert
          secret:
            secretName: {{ .Chart.Name }}-cert
        {{- if .Values.proxy.tcell.enabled }}
        - name: tcell-config
          configMap:
            name: {{ .Chart.Name }}-tcell-configmap
            items:
            - key: tcell-config
              path: tcell-config.conf
        {{- end }}
        {{- end }}
---
{{- if .Values.postgres.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Chart.Name }}-postgres-deployment
  labels:
    {{ template "workspacemanager.labels" . }}
{{- include "postgres.deployment.tpl" . }}
{{- end }}
