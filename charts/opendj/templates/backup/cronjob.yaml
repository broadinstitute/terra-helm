{{- if .Values.backup.enabled }}
{{- $imageTag := .Values.imageConfig.tag | default .Values.global.applicationVersion -}}
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: {{ .Values.name }}-backup-cronjob
  labels: {{ include "opendj.labels" . | nindent 4 }}
spec:
  schedule: "15,45 * * * *" # Run at :15 and :45 for testing
  # schedule: "0 10 * * *" # Run once a day at 10 am UTC / 5 am EST
  concurrencyPolicy: Replace
  jobTemplate:
    metadata:
      labels: {{ include "opendj.labels" . | nindent 8 }}
    spec:
      activeDeadlineSeconds: {{ .Values.backup.timeoutSeconds }}
      template:
        metadata:
          labels: {{ include "opendj.labels" . | nindent 12 }}
        spec:
          serviceAccountName: {{ .Values.name }}-service-sa
          containers:
          - name: {{ .Values.name }}-backup-upload
            image: {{ .Values.backup.cloudsdkImage.repository }}:{{ .Values.backup.cloudsdkImage.tag }}
            command: ['sh', '-c']
            args:
            - |-
              TIMESTAMP=$( date "+%Y%m%d.%H%M%S" ) && \
              gcloud auth activate-service-account --key-file=/sa-key.json && \
              gcloud container clusters get-credentials --internal-ip {{ .Release.Namespace }} {{ .Values.backup.clusterLocation }} --project broad-dsde-{{ trimPrefix "terra-" .Release.Namespace }} && \
              kubectl cp \
                "{{ .Release.Namespace }}/opendj-statefulset-0:/opt/opendj/data/bak" \
                "backup" && \
              kubectl cp \
                "{{ .Release.Namespace }}/opendj-statefulset-0:/opt/opendj/data/config" \
                "backup/config" && \
              tar -cvzf backup.tgz /backup && \
              gsutil cp backup.tgz "gs://${GCS_BUCKET}/backup-${TIMESTAMP}.tgz" && \
              kubectl exec \
                --namespace "{{ .Release.Namespace }}" \
                opendj-statefulset-0 \
                -c opendj -- /bin/bash -c \
                  "rm -rf /opt/opendj/data/bak/*"
            env:
            - name: GCS_BUCKET
              value: {{ .Values.backup.gcsBucket | quote }}
            volumeMounts:
            - mountPath: /backup
              name: backup-data
            - mountPath: /sa-key.json
              name: gcp-sa
              subPath: sa-key.json
          restartPolicy: OnFailure
          nodeSelector: {{ .Values.backup.nodeSelector | toYaml | nindent 12 }}
          tolerations: {{ .Values.backup.tolerations | toYaml | nindent 12 }}
          volumes:
          - name: backup-data
            emptyDir: {}
          - name: gcp-sa
            secret:
              secretName: {{ .Values.name }}-secrets
              items:
              - key: backup-credentials
                path: sa-key.json
{{- end }}
