global:
  name: grafana

ingress:
  # -- ENABLE this wrapper's simpler ingress config
  enabled: true
  # -- (string) Name of static IP previously allocated in the project
  staticIpName:
  # -- (string) Optionally, the name of a cloud armor security policy to apply to the ingress backend
  securityPolicy: null
  # -- Path to use for LB health checks
  requestPath: /api/health
  # -- Seconds before LB health check will time out
  timeoutSec: 120
  
  cert:
    # -- Previously provisioned certs to use on the LB
    preSharedCerts: []
  certmanager:
    # -- If CertManager should be used to dynamically provision an LB cert
    enabled: true
    # -- FQDNs to allocate cert for
    dnsNames: []

secrets:
  # -- A secret Grafana can use for its default Admin account
  adminAccount:
    # -- (string) Path within Vault to the desired Vault secret
    vaultPath: 
    # -- (string) Key within the desired Vault secret to the desired individual secret value to use
    usernameVaultKey:
    # -- (string) Encoding of the secret value in vault (either `text` or `base64`)
    usernameSourceEncoding: text
    # -- (string) Key within the desired Vault secret to the desired individual secret value to use
    passwordVaultKey:
    # -- (string) Encoding of the secret value in vault (either `text` or `base64`)
    passwordSourceEncoding: text
  # -- A secret containing database cert files to use for Grafana's persistence
  databaseInstance:
    # -- (string) Path within Vault to the desired Vault secret
    vaultPath: 
    # -- (string) Key within the desired Vault secret to the desired individual secret value to use
    nameVaultKey: name
    # -- (string) Encoding of the secret value in vault (either `text` or `base64`)
    nameSourceEncoding: text
    # -- (string) Key within the desired Vault secret to the desired individual secret value to use
    regionVaultKey: region
    # -- (string) Encoding of the secret value in vault (either `text` or `base64`)
    regionSourceEncoding: text
    # -- (string) Key within the desired Vault secret to the desired individual secret value to use
    projectVaultKey: project
    # -- (string) Encoding of the secret value in vault (either `text` or `base64`)
    projectSourceEncoding: text
  # -- (list) Secrets to be placed into environment variables in the grafana container
  containerEnv:
    - # -- (string) Name of the environment variable to create
      envVar:
      # -- (string) Path within Vault to the desired Vault secret
      vaultPath:
      # -- (string) Key within the desired Vault secret to the desired individual secret value to use
      vaultKey:
      # -- (string) Encoding of the secret value in vault (either `text` or `base64`)
      sourceEncoding: text
  githubTeamSync:
    # -- (string) Path within Vault to the desired Vault secret
    githubTokenVaultPath:
    # -- (string) Key within the desired Vault secret to the desired individual secret value to use
    githubTokenVaultKey: token
    # -- (string) Encoding of the secret value in vault (either `text` or `base64`)
    githubTokenSourceEncoding: text
    # -- (string) Path within Vault to the desired Vault secret
    grafanaAuthVaultPath:
    # -- (string) Key within the desired Vault secret to the desired individual secret value to use
    grafanaAuthUsernameVaultKey: username
    # -- (string) Encoding of the secret value in vault (either `text` or `base64`)
    grafanaAuthUsernameSourceEncoding: text
    # -- (string) Key within the desired Vault secret to the desired individual secret value to use
    grafanaAuthPasswordVaultKey: password
    # -- (string) Encoding of the secret value in vault (either `text` or `base64`)
    grafanaAuthPasswordSourceEncoding: text

githubTeamSync:
  # -- If broadinstitute/grafana-github-team-sync should be run as a cronjob
  enabled: false
  # -- FQDN of the Grafana to target
  grafanaHost: dsp-grafana.grafana
  # -- Protocol to use to communicate with grafanaHost
  grafanaProtocol: http
  # -- Optional port to use to communicate with grafanaHost
  grafanaPort: 80
  # -- Image to use for the cronjob, pulled each time
  image: us-central1-docker.pkg.dev/dsp-artifact-registry/grafana-github-team-sync/grafana-github-team-sync:edge
  # -- A specific team to also be granted admin, like `broadinstitute/dsp-devops. Can be set to empty to have none.
  teamGrantingGrafanaAdmin:
  # -- The numeric ID of the Grafana org to target
  targetGrafanaOrgId: 1
  # -- Comma separated list of exact usernames to never remove permissions from
  neverRemovePermissionsFrom: admin
  # -- Timeout for the cronjob
  timeoutSeconds: 900
  # -- The schedule to run the job on (14:00 UTC == 2:00PM UTC == 9:00AM ET, after BITS GitHub sync from 6-9am)
  # https://broadinstitute.slack.com/archives/C4P1S6KB8/p1628173022001400?thread_ts=1628172949.001300&cid=C4P1S6KB8
  schedule: 0 14 * * *

# -- Options supporting the use of the Grafana sidecar for importing JSON from K8s if the sidecar targets non-release namespaces
sidecarFacilitation:
  # -- If this chart should create namespaces the sidecar intends to search
  createSearchedNamespaces: false
  # -- A list of users (can be GCP SA emails) to grant narrow access to the namespaces
  grantUsersNamespaceAccess: []
  # -- Allow any users with namespace access to also rollout a grafana restart
  allowGrantedUsersToRestart: true

grafana:
  fullnameOverride: dsp-grafana

  # -- Reference the wrapper's secret to add to the grafana environment
  envFromSecret: '{{ .Values.global.name }}-container-env'

  # -- Bump the default replicas since the wrapper's database persistence allows it
  replicas: 3

  # -- Replicaset revisions not saved since we'd rollback via gitops or argo
  revisionHistoryLimit: 0

  ingress:
    # -- DISABLE grafana's built-in ingress
    enabled: false

  serviceAccount:
    # -- Set the SA name specifically so cronjobs can use it
    name: grafana-sa

  admin:
    # -- Derive the admin account credentials from a secret (created by secrets.AdminAccount)
    existingSecret: grafana-admin-account

  service:
    # -- Port to run the (non-HTTPS) service over
    port: 80

    annotations:
      # Associate a backend config with the ingress: https://cloud.google.com/kubernetes-engine/docs/how-to/ingress-features#associating_backendconfig_with_your_ingress
      # Value should match `{{ .Values.global.name }}-ingress-backendconfig` per backendConfig.yaml, but we can't template here
      cloud.google.com/backend-config: '{"default": "grafana-ingress-backendconfig"}'
      # Enable container-native load balancing https://cloud.google.com/kubernetes-engine/docs/how-to/container-native-load-balancing
      cloud.google.com/neg: '{"ingress": true}'
      # DISABLE TLS between LB and app https://cloud.google.com/kubernetes-engine/docs/concepts/ingress-xlb
      # Key should match `{{ .Values.grafana.service.portName }}`, default of "service", but we can't template here
      cloud.google.com/app-protocols: '{"service":"HTTP"}'

  imageRenderer:
    # -- Replicaset revisions not saved since we'd rollback via gitops or argo
    revisionHistoryLimit: 0

  sidecar:
    dashboards:
      # -- Dashboards from configmaps disabled by default
      enabled: false

      # -- (list) Namespaces to look for configmaps in; if empty, use the release namespace
      # Note: 'all' is theoretically supported here but not by `.Values.sidecarFacilitation`
      # Note: empty causes `.Values.sidecarFacilitation` to have no effect
      searchNamespace:

      provider:
        # -- Respect filesystem structure derived from the configmap annotations
        foldersFromFilesStructure: true

  # -- Include the cloud SQL proxy as a sidecar
  extraContainers: |-
    - name: cloudsql-proxy
      image: gcr.io/cloudsql-docker/gce-proxy:1.27.0
      envFrom:
        - secretRef:
            name: {{ .Values.global.name }}-sqlproxy-env
      command: 
        - "/cloud_sql_proxy"
        - "-instances=$(SQL_INSTANCE_PROJECT):$(SQL_INSTANCE_REGION):$(SQL_INSTANCE_NAME)=tcp:5432"
  
  # -- Make Grafana briefly sleep before starting to let the CloudSQL proxy come online
  command:
    - "/bin/sh"
    - "-c"
    - "sleep 5; /run.sh"

  grafana.ini:
    # -- Leave most config to the env but do set fields relating to the CloudSQL requirements
    database:
      type: postgres
      host: localhost:5432
      ssl_mode: disable
