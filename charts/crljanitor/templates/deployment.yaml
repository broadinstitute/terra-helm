apiVersion: apps/v1
kind: Deployment
metadata:
  name: terra-crl-janitor-deployment
  labels:
    {{ template "crljanitor.labels" . }}
spec:
  replicas: {{ .Values.replicas }}
  selector:
    matchLabels:
      app: terra-crl-janitor
  template:
    metadata:
      name: terra-crl-janitor-service
      labels:
        app: terra-crl-janitor
    spec:
      serviceAccountName: terra-crl-janitor-service-sa
      containers:
      - name: terra-crl-janitor
        image: "{{- if .Values.image -}}
            {{ .Values.image }}
          {{- else -}}
            {{ .Values.imageConfig.repository }}:{{ default .Values.appVersion .Values.imageConfig.tag }}
          {{- end }}"
        imagePullPolicy: {{ .Values.imageConfig.imagePullPolicy }}
        {{- if not .Values.proxy.enabled }}
        ports:
        - containerPort: 8080
        {{- end}}
        env:
        - name: DATABASE_USER
          valueFrom:
            secretKeyRef:
              name: crl-janitor-postgres-db-creds
              key: username
        - name: DATABASE_USER_PASSWORD
          valueFrom:
            secretKeyRef:
              name: crl-janitor-postgres-db-creds
              key: password
        - name: DATABASE_NAME
          valueFrom:
            secretKeyRef:
              name: crl-janitor-postgres-db-creds
              key: db
      - name: cloudsql-proxy
        image: gcr.io/cloudsql-docker/gce-proxy:1.16
        env:
        - name: SQL_INSTANCE_PROJECT
          valueFrom:
            secretKeyRef:
              name: crl-janitor-cloudsql-postgres-instance
              key: project
        - name: SQL_INSTANCE_REGION
          valueFrom:
            secretKeyRef:
              name: crl-janitor-cloudsql-postgres-instance
              key: region
        - name: SQL_INSTANCE_NAME
          valueFrom:
            secretKeyRef:
              name: crl-janitor-cloudsql-postgres-instance
              key: name
        command: ["/cloud_sql_proxy",
                  "-instances=$(SQL_INSTANCE_PROJECT):$(SQL_INSTANCE_REGION):$(SQL_INSTANCE_NAME)=tcp:5432",
                  "-credential_file=/secrets/cloudsql/service-account.json"]
        securityContext:
          runAsUser: 2  # non-root user
          allowPrivilegeEscalation: false
        volumeMounts:
        - name: cloudsql-sa-creds
          mountPath: /secrets/cloudsql
          readOnly: true
      volumes:
        - name: cloudsql-sa-creds
          secret:
            secretName: crl-janitor-sa
